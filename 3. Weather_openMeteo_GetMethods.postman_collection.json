{
	"info": {
		"_postman_id": "fb2e3965-4a4c-451d-a2ab-347beca8b6ce",
		"name": "Weather_openMeteo_GetMethods",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33028948"
	},
	"item": [
		{
			"name": "getSevenDayForecast",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code validation\r",
							"pm.test(\"1. Response code should 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Logging examples \r",
							"pm.test(\"2. Logging to console example\", function () {\r",
							"    console.log('Status code: ' + pm.response.code);\r",
							"    console.log('Content-type: ' + pm.response.headers.get(\"Content-type\"));\r",
							"    console.log('Header: ' + pm.response.headers);\r",
							"    console.log('Response body: ' + pm.response.json());\r",
							"    console.log('Response body: ' + pm.response.text());\r",
							"});\r",
							"\r",
							"// 3. Content type should be application/json in the response header \r",
							"pm.test(\"3. Validate response header to be application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// 4. Validate response body to be correct json format \r",
							"pm.test(\"4. Validate response body to be correct json format\", function () {\r",
							"    let jsonBody = pm.response.json();\r",
							"    pm.expect(jsonBody).to.ok;\r",
							"});\r",
							"\r",
							"// 5. Validate response body attributes exist \r",
							"pm.test(\"5. Validate response body attributes exist\", function () {\r",
							"    let responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('latitude');\r",
							"    pm.expect(responseText).to.include('generationtime_ms');\r",
							"    pm.expect(responseText).to.include('temperature_2m');\r",
							"    pm.expect(responseText).to.include('rain');\r",
							"    pm.expect(responseText).to.include('snowfall');\r",
							"});\r",
							"\r",
							"// 6. Validate response body attribute structure valid\r",
							"pm.test(\"6. Validate response body attributes structure and types\", function () {\r",
							"    let responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"    pm.expect(responseJson.latitude).to.be.a('number');\r",
							"    pm.expect(responseJson.hourly.time[0]).to.be.a('string');\r",
							"    pm.expect(responseJson.hourly_units.temperature_2m).to.be.a('string');\r",
							"    pm.expect(responseJson.hourly.time[3]).to.be.a('string');\r",
							"    pm.expect(responseJson.hourly.rain[12]).to.be.a('number');\r",
							"    pm.expect(responseJson.hourly.snowfall[4]).to.be.a('number');\r",
							"});\r",
							"\r",
							"// 7. Validate response body attribute values\r",
							"pm.test(\"7. Validate response body attribute values are present\", function () {\r",
							"    let responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.hourly_units.rain).to.eql('mm');\r",
							"    pm.expect(responseJson.hourly_units.time).to.eql('iso8601');\r",
							"    pm.expect(responseJson.hourly.time[0]).to.eql('2024-05-05T00:00');\r",
							"});\r",
							"\r",
							"// 8. Predined json object is in the response body or not\r",
							"pm.test(\"8. Validate response contains expected JSON object\", function () {\r",
							"    let responseJson = pm.response.json();\r",
							"    let weatherObject = {\r",
							"        \"latitude\": 52.52,\r",
							"        \"longitude\": 13.419998,\r",
							"        \"utc_offset_seconds\": 0,\r",
							"        \"timezone\": \"GMT\",\r",
							"        \"timezone_abbreviation\": \"GMT\",\r",
							"        \"elevation\": 38.0,\r",
							"    }\r",
							"    pm.expect(responseJson).to.deep.include(weatherObject);\r",
							"});\r",
							"\r",
							"// 9. Response time performance test - Validate response time is below than 200 ms \r",
							"pm.test(\"9. Validate response time is below than 200 ms\", function () {\r",
							"    let responseTime = pm.response.responseTime;\r",
							"    pm.expect(responseTime).to.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m,rain,snowfall,surface_pressure,wind_speed_180m,soil_temperature_54cm",
					"protocol": "https",
					"host": [
						"api",
						"open-meteo",
						"com"
					],
					"path": [
						"v1",
						"forecast"
					],
					"query": [
						{
							"key": "latitude",
							"value": "52.52"
						},
						{
							"key": "longitude",
							"value": "13.41"
						},
						{
							"key": "hourly",
							"value": "temperature_2m,rain,snowfall,surface_pressure,wind_speed_180m,soil_temperature_54cm"
						}
					]
				}
			},
			"response": []
		}
	]
}