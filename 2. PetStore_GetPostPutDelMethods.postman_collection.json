{
	"info": {
		"_postman_id": "72f76aed-e034-4420-b029-f9087ded39b5",
		"name": "PetStore_GetPostPutDelMethods",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33028948"
	},
	"item": [
		{
			"name": "getAvailablePets - get a list of Pet objects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code validation\r",
							"pm.test(\"Response code should 200 OK\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"// 2. Logging\r",
							"pm.test(\"Logging to console example\", function(){\r",
							"console.log('Status code: ' + pm.response.code); \r",
							"console.log('Content-type: ' + pm.response.headers.get(\"Content-type\")); \r",
							"}); \r",
							"\r",
							"// 3. Content type should be application/json in the response header \r",
							"pm.test(\"Validate response header to be application/json\", function(){\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); \r",
							"}); \r",
							"\r",
							"// 4. Validate response body to be correct json format\r",
							"pm.test(\"Validate response body to be correct json format\", function(){\r",
							"console.log('Response body: ' + pm.response.json()); \r",
							"let jsonBody = pm.response.json();\r",
							"pm.expect(jsonBody).to.ok;\r",
							"}); \r",
							"\r",
							"// 5. Validate response body attributes exist\r",
							"pm.test(\"Validate response body attributes exist\", function(){\r",
							"    let responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('id'); \r",
							"    pm.expect(responseText).to.include('category');\r",
							"    pm.expect(responseText).to.include('name');\r",
							"    pm.expect(responseText).to.include('photoUrls');\r",
							"    pm.expect(responseText).to.include('tags');\r",
							"    pm.expect(responseText).to.include('status');\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); \r",
							"}); \r",
							"\r",
							"// 6. Validate response body attribute structure valid\r",
							"pm.test(\"Validate response body attributes structure and types\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"     console.log('Response body id: ' + responseJson[0].id);\r",
							"     pm.expect(responseJson[0]).to.be.a('object');\r",
							"     pm.expect(responseJson[0].id).to.be.a('number'); \r",
							"     pm.expect(responseJson[0].name).to.be.a('string');\r",
							"     pm.expect(responseJson[0].status).to.be.a('string'); \r",
							"     pm.expect(responseJson[0].photoUrls[0]).to.be.a('string');\r",
							"     pm.expect(responseJson[0].category.id).to.be.a('number');\r",
							"     pm.expect(responseJson[0].category.name).to.be.a('string');\r",
							"     pm.expect(responseJson[0].tags[0]).to.be.a('object'); \r",
							"}); \r",
							"\r",
							"// 7. Validate response body attribute values \r",
							"pm.test(\"Validate response body attribute values are present\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"     pm.expect(responseJson[0].id).to.eql(9223372016900023157);\r",
							"     pm.expect(responseJson[0].name).to.eql('doggie');\r",
							"\r",
							"}); \r",
							"\r",
							"// 8. Predined json object is in the response body or not \r",
							"pm.test(\"Validate response contains expected JSON object\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"    let rexObject = {\r",
							"            \"id\": 9223372036854298496,\r",
							"            \"category\": {\r",
							"                \"id\": 0,\r",
							"                \"name\": \"string\"\r",
							"            },\r",
							"            \"name\": \"Rex\",\r",
							"            \"photoUrls\": [\r",
							"                \"string\"\r",
							"            ],\r",
							"            \"tags\": [\r",
							"                {\r",
							"                    \"id\": 0,\r",
							"                    \"name\": \"string\"\r",
							"                }\r",
							"            ],\r",
							"            \"status\": \"available\"\r",
							"        };\r",
							"     pm.expect(responseJson).to.deep.include(rexObject); \r",
							"});\r",
							"\r",
							"// 9. Response time performance test\r",
							"pm.test(\"Validate response time is below than 200ms\", function(){\r",
							"    let responseTime = pm.response.responseTime;\r",
							"     pm.expect(responseTime).to.below(200);\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/findByStatus?status=available",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"findByStatus"
					],
					"query": [
						{
							"key": "status",
							"value": "available"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getPetById - get a Pet object",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code validation\r",
							"pm.test(\"Response code should 200 OK\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"// 2. Logging\r",
							"pm.test(\"Logging to console example\", function(){\r",
							"console.log('Status code: ' + pm.response.code); \r",
							"console.log('Content-type: ' + pm.response.headers.get(\"Content-type\")); \r",
							"}); \r",
							"\r",
							"// 3. Content type should be application/json in the response header \r",
							"pm.test(\"Validate response header to be application/json\", function(){\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); \r",
							"}); \r",
							"\r",
							"// 4. Validate response body to be correct json format\r",
							"pm.test(\"Validate response body to be correct json format\", function(){\r",
							"console.log('Response body: ' + pm.response.json()); \r",
							"let jsonBody = pm.response.json();\r",
							"pm.expect(jsonBody).to.ok; \r",
							"}); \r",
							"\r",
							"// 5. Validate response body attributes exist\r",
							"pm.test(\"Validate response body attributes exist\", function(){\r",
							"    let responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('id'); \r",
							"    pm.expect(responseText).to.include('category');\r",
							"    pm.expect(responseText).to.include('name');\r",
							"    pm.expect(responseText).to.include('photoUrls');\r",
							"    pm.expect(responseText).to.include('tags');\r",
							"    pm.expect(responseText).to.include('status');\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); \r",
							"}); \r",
							"\r",
							"// 6. Validate response body attribute structure valid \r",
							"pm.test(\"Validate response body attributes structure and types\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"     console.log('Response body id: ' + responseJson.id);\r",
							"     pm.expect(responseJson).to.be.a('object'); \r",
							"     pm.expect(responseJson.id).to.be.a('number'); \r",
							"     pm.expect(responseJson.name).to.be.a('string');\r",
							"     pm.expect(responseJson.status).to.be.a('string');\r",
							"     pm.expect(responseJson.photoUrls[0]).to.be.a('string'); \r",
							"     pm.expect(responseJson.category.id).to.be.a('number');\r",
							"     pm.expect(responseJson.category.name).to.be.a('string');\r",
							"     pm.expect(responseJson.tags[0]).to.be.a('object'); \r",
							"     pm.expect(responseJson.categoryy).to.not.be; \r",
							"}); \r",
							"\r",
							"// 7. Validate response body attribute values\r",
							"pm.test(\"Validate response body attribute values are present\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"     pm.expect(responseJson.id).to.eql(1249875355); \r",
							"     pm.expect(responseJson.name).to.eql('XbvopoWi'); \r",
							"}); \r",
							"\r",
							"// 8. Predined json object is in the response body or not\r",
							"pm.test(\"Validate response contains expected JSON object\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"    let rexObject = {\r",
							"    \"id\": 1249875355,\r",
							"    \"category\": {\r",
							"        \"id\": 1249875355,\r",
							"        \"name\": \"Lavonna\"\r",
							"    },\r",
							"    \"name\": \"XbvopoWi\",\r",
							"    \"photoUrls\": [\r",
							"        \"http://lorempixel.com/1366/768/nature/\",\r",
							"        \"http://lorempixel.com/g/1920/1200/sports/\",\r",
							"        \"http://lorempixel.com/320/200/transport/\"\r",
							"    ],\r",
							"    \"tags\": [\r",
							"        {\r",
							"            \"id\": 1249875355,\r",
							"            \"name\": \"McClure\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 1249875355,\r",
							"            \"name\": \"Veum\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 1249875355,\r",
							"            \"name\": \"Larson\"\r",
							"        }\r",
							"    ],\r",
							"    \"status\": \"available\"\r",
							"};\r",
							"     pm.expect(responseJson).to.deep.include(rexObject); \r",
							"});\r",
							"\r",
							"// 9. Response time performance test\r",
							"pm.test(\"Validate response time is below than 200ms\", function(){\r",
							"    let responseTime = pm.response.responseTime;\r",
							"     pm.expect(responseTime).to.below(200); \r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/1249875355",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"1249875355"
					]
				}
			},
			"response": []
		},
		{
			"name": "postPet - save new Pet object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code validation\r",
							"pm.test(\"Response code should 200 OK\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"// 2. Logging\r",
							"pm.test(\"Logging to console example\", function(){\r",
							"console.log('Status code: ' + pm.response.code); \r",
							"console.log('Content-type: ' + pm.response.headers.get(\"Content-type\")); \r",
							"}); \r",
							"\r",
							"// 3. Content type should be application/json in the response header \r",
							"pm.test(\"Validate response header to be application/json\", function(){\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); \r",
							"}); \r",
							"\r",
							"// 4. Validate response body to be correct json format\r",
							"pm.test(\"Validate response body to be correct json format\", function(){\r",
							"console.log('Response body: ' + pm.response.json());\r",
							"let jsonBody = pm.response.json();\r",
							"pm.expect(jsonBody).to.ok;\r",
							"}); \r",
							"\r",
							"// 5. Validate response body attributes exist\r",
							"pm.test(\"Validate response body attributes exist\", function(){\r",
							"    let responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('id'); \r",
							"    pm.expect(responseText).to.include('category');\r",
							"    pm.expect(responseText).to.include('name');\r",
							"    pm.expect(responseText).to.include('photoUrls');\r",
							"    pm.expect(responseText).to.include('tags');\r",
							"    pm.expect(responseText).to.include('status');\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); \r",
							"}); \r",
							"\r",
							"// 6. Validate response body attribute structure valid \r",
							"pm.test(\"Validate response body attributes structure and types\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"     console.log('Response body id: ' + responseJson.id);\r",
							"     pm.expect(responseJson).to.be.a('object'); \r",
							"     pm.expect(responseJson.id).to.be.a('number'); \r",
							"     pm.expect(responseJson.name).to.be.a('string'); \r",
							"     pm.expect(responseJson.status).to.be.a('string'); \r",
							"     pm.expect(responseJson.photoUrls[0]).to.be.a('string'); \r",
							"     pm.expect(responseJson.category.id).to.be.a('number'); \r",
							"     pm.expect(responseJson.category.name).to.be.a('string'); \r",
							"     pm.expect(responseJson.tags[0]).to.be.a('object');\r",
							"     pm.expect(responseJson.categoryy).to.not.be; \r",
							"}); \r",
							"\r",
							"// 7. Validate response body attribute values \r",
							"pm.test(\"Validate response body attribute values are present\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"     pm.expect(responseJson.id).to.eql(9223372036854775807); \r",
							"     pm.expect(responseJson.name).to.eql('Buksi'); \r",
							"}); \r",
							"\r",
							"// 8. Predined json object is in the response body or not \r",
							"pm.test(\"Validate response contains expected JSON object\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"    let rexObject = {\r",
							"    \"id\": 9223372036854775713,\r",
							"    \"category\": {\r",
							"        \"id\": 0,\r",
							"        \"name\": \"string\"\r",
							"    },\r",
							"    \"name\": \"Buksi\",\r",
							"    \"photoUrls\": [\r",
							"        \"string\"\r",
							"    ],\r",
							"    \"tags\": [\r",
							"        {\r",
							"            \"id\": 0,\r",
							"            \"name\": \"string\"\r",
							"        }\r",
							"    ],\r",
							"    \"status\": \"available\"\r",
							"};\r",
							"     pm.expect(responseJson).to.deep.include(rexObject); \r",
							"});\r",
							"\r",
							"// 9. Response time performance test\r",
							"pm.test(\"Validate response time is below than 200ms\", function(){\r",
							"    let responseTime = pm.response.responseTime;\r",
							"     pm.expect(responseTime).to.below(200); \r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"Buksi\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    { \r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "putPet - update Pet object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code validation\r",
							"pm.test(\"Response code should 200 OK\", function(){\r",
							"pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"// 2. Logging\r",
							"pm.test(\"Logging to console example\", function(){\r",
							"console.log('Status code: ' + pm.response.code); \r",
							"console.log('Content-type: ' + pm.response.headers.get(\"Content-type\")); \r",
							"}); \r",
							"\r",
							"// 3. Content type should be application/json in the response header \r",
							"pm.test(\"Validate response header to be application/json\", function(){\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); \r",
							"}); \r",
							"\r",
							"// 4. Validate response body to be correct json format\r",
							"pm.test(\"Validate response body to be correct json format\", function(){\r",
							"console.log('Response body: ' + pm.response.json());\r",
							"let jsonBody = pm.response.json(); \r",
							"pm.expect(jsonBody).to.ok; \r",
							"}); \r",
							"\r",
							"// 5. Validate response body attributes exist\r",
							"pm.test(\"Validate response body attributes exist\", function(){\r",
							"    let responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('id');\r",
							"    pm.expect(responseText).to.include('name');\r",
							"    pm.expect(responseText).to.include('photoUrls');\r",
							"    pm.expect(responseText).to.include('tags');\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); \r",
							"}); \r",
							"\r",
							"// 6. Validate response body attribute structure valid \r",
							"pm.test(\"Validate response body attributes structure and types\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"     console.log('Response body id: ' + responseJson.id); \r",
							"     pm.expect(responseJson).to.be.a('object'); \r",
							"     pm.expect(responseJson.id).to.be.a('number'); \r",
							"     pm.expect(responseJson.name).to.be.a('string'); \r",
							"     pm.expect(responseJson.photoUrls[0]).to.be.a('string');\r",
							"     pm.expect(responseJson.categoryy).to.not.be; \r",
							"}); \r",
							"\r",
							"// 7. Validate response body attribute values //validáció az adott attribútum értékére\r",
							"pm.test(\"Validate response body attribute values are present\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"     pm.expect(responseJson.id).to.eql(9223372016900109289); \r",
							"     pm.expect(responseJson.name).to.eql('Buksi'); \r",
							"}); \r",
							"\r",
							"// 8. Predined json object is in the response body or not \r",
							"pm.test(\"Validate response contains expected JSON object\", function(){\r",
							"    let responseJson = pm.response.json();\r",
							"    let rexObject = {\r",
							"    \"id\": 9223372016900109289,\r",
							"    \"name\": \"Buksi\",\r",
							"    \"photoUrls\": [\r",
							"        \"ez a string felulirodott\"\r",
							"    ],\r",
							"    \"tags\": []\r",
							"};\r",
							"     pm.expect(responseJson).to.deep.include(rexObject); \r",
							"});\r",
							"\r",
							"// 9. Response time performance test\r",
							"pm.test(\"Validate response time is below than 200ms\", function(){\r",
							"    let responseTime = pm.response.responseTime;\r",
							"     pm.expect(responseTime).to.below(200); \r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 9223372016900109289,\r\n    \"name\": \"Buksi\",\r\n    \"photoUrls\": [\r\n        \"ez a string felulirodott\"\r\n    ],\r\n    \"tags\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "deletePetById - delete Pet object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Status code validation\r",
							"pm.test(\"Response code should 404 Not found\", function(){\r",
							"pm.response.to.have.status(404);\r",
							"}); \r",
							"\r",
							"// 9. Response time performance test\r",
							"pm.test(\"Validate response time is below than 200ms\", function(){\r",
							"    let responseTime = pm.response.responseTime;\r",
							"     pm.expect(responseTime).to.below(200);\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/92233k",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"92233k"
					]
				}
			},
			"response": []
		}
	]
}